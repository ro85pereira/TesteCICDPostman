{
	"info": {
		"_postman_id": "d944185e-f607-46bc-b6a8-798e711fc522",
		"name": "TQA13-Login",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38100241"
	},
	"item": [
		{
			"name": "Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"TOKENADM\", pm.response.json().token);\r",
							"\r",
							"pm.test(\"Status test\", function () { pm.response.to.have.status(200)});\r",
							"\r",
							"pm.test(\"Check token is true\", function () {\r",
							"   pm.expect(pm.response.json().token).to.exist;\r",
							"})\r",
							"\r",
							"pm.test(\"Sucess message validation\", function () {\r",
							"    pm.expect(pm.response.json().msg).to.include(\"autenticação autorizada com sucesso!\");\r",
							"  });\r",
							"\r",
							"  const capturarValorJson = pm.response.json().token;\r",
							"pm.environment.set(\"TOKENADM\",capturarValorJson);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar usuário",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function firstname() {\r",
							"    const names = ['Alice', 'Miguel', 'Sophia', 'Arthur', 'Helena', 'Bernardo', 'Valentina', 'Heitor', 'Laura', 'Davi', 'Isabella', 'Lorenzo', 'Manuela', 'Theo', 'Luiza', 'Pedro', 'Giovanna', 'Gabriel', 'Julia'];\r",
							"    \r",
							"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
							"    return randomName\r",
							"}\r",
							"pm.environment.set(\"FirstName\", firstname())\r",
							"\r",
							"\r",
							"\r",
							"function lastname() {\r",
							"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Rodrigues', 'Almeida', 'Lima', 'Ferreira', 'Pereira', 'Carvalho', 'Goncalves', 'Ribeiro', 'Costa', 'Araujo', 'Martins', 'Fernandes'];\r",
							"\r",
							"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
							"    return randomLastName\r",
							"}\r",
							"pm.environment.set(\"LastName\", lastname())\r",
							"\r",
							"pm.environment.set(\"fullName\", \r",
							"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
							"\r",
							"\r",
							"pm.environment.set(\"mail\", pm.environment.get(\"fullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
							"\r",
							"\r",
							"function randomCPF() {\r",
							"    let randomCPF = '';\r",
							"   \r",
							"    for (let i = 0; i < 11; i++) {\r",
							"        randomCPF += Math.floor(Math.random() * 10).toString();\r",
							"    }\r",
							"    return randomCPF;\r",
							"}\r",
							"pm.environment.set(\"cpf\", randomCPF());\r",
							"\r",
							"function generatePassword() {\r",
							"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
							"    const comprimentoMinimo = 8;\r",
							"    const comprimentoMaximo = 12;\r",
							"    let senhaArray = [];\r",
							" \r",
							"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
							"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
							"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
							"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
							"    \r",
							"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
							"    \r",
							"    for (let i = 0; i < comprimentoRestante; i++) {\r",
							"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
							"    }\r",
							"    return shuffleString(senhaArray.join(\"\"));\r",
							"}\r",
							"\r",
							"function shuffleString(string) {\r",
							"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
							"}\r",
							"pm.environment.set(\"password\", generatePassword());\r",
							"\r",
							"\r",
							"\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{TOKENADM}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"confirmPassword\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/user",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login usuário",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Renamed variable to a unique name\r",
							"const capturarValorJsonToken = pm.response.json().token;\r",
							"pm.environment.set(\"TOKENUSUARIO\", capturarValorJsonToken);\r",
							"\r",
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if token exist\", function () {\r",
							"   pm.expect(pm.response.json().token).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Sucess message validation\", function () {\r",
							"    pm.expect(pm.response.json().msg).to.include(\"autenticação autorizada com sucesso!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"mail\": \"{{mail}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar usuário",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{TOKENADM}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/api/user/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar nome e email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",function (){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message validation\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Dados atualizados com sucesso\");\r",
							"});\r",
							"\r",
							"pm.test(\"Mail Validation\", function () {\r",
							"    const emailDigitado = pm.environment.get(\"mail\");\r",
							"    pm.expect(pm.response.json().updatedUser.mail).to.eql(emailDigitado);\r",
							"});\r",
							"\r",
							"pm.test(\"Name validation\", function(){\r",
							"    const nomeDigitado = pm.environment.get(\"fullname\");\r",
							"    pm.expect(pm.response.json().updatedUser.fullName).to.eql(nomeDigitado);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomUserName(){\r",
							"    const names = ['Salazar Luks','Maximus Roma','Paulo Paulada','Jobson Weskley','Lucas Lucas'];\r",
							"    const randomName = names[Math.floor(Math.random()*names.length)]\r",
							"    return randomName;\r",
							"}\r",
							"pm.environment.set(\"fullname\",randomUserName());\r",
							"\r",
							"function randomUserEmail(){\r",
							"    const email = ['sala@hotmail.com.br','reti@bol.com.br','quebs@ponto.com.br','boab@boa.com.br','sasa@gmail.com','dudu_online@ji.com.br','sa@ig.com.br'];\r",
							"    const randomEmail = email[Math.floor(Math.random()*email.length)]\r",
							"    return randomEmail;\r",
							"}\r",
							"pm.environment.set(\"mail\",randomUserEmail());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "authorization",
						"value": "{{TOKENUSUARIO}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"fullName\": \"{{fullname}}\",\r\n  \"mail\": \"{{mail}}\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/user/6798371fe270333a9a038f5a",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						"6798371fe270333a9a038f5a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Sucess message validation\", function(){\r",
							"    pm.expect(pm.response.json().msg).to.be.eql(\"Senha atualizada com sucesso!\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generatePassword() {\r",
							"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
							"    const comprimentoMinimo = 8;\r",
							"    const comprimentoMaximo = 12;\r",
							"    let senhaArray = [];\r",
							" \r",
							"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
							"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
							"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
							"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
							"    \r",
							"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
							"    \r",
							"    for (let i = 0; i < comprimentoRestante; i++) {\r",
							"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
							"    }\r",
							"    return shuffleString(senhaArray.join(\"\"));\r",
							"}\r",
							"\r",
							"function shuffleString(string) {\r",
							"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
							"}\r",
							"pm.environment.set(\"password\", generatePassword());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "authorization",
						"value": "{{TOKENUSUARIO}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"confirmPassword\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/user/password/6798371fe270333a9a038f5a",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						"password",
						"6798371fe270333a9a038f5a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status validation\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message validation\", function(){\r",
							"    pm.expect(pm.response.json().msg).to.eql(\"Status do usuario atualizado com sucesso para status true.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{TOKENADM}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"status\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/user/status/6798371fe270333a9a038f5a",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						"status",
						"6798371fe270333a9a038f5a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Não editar password, passwords não coincidem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Validation\", function () {\r",
							"     pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message validation no permission\", function(){\r",
							"    pm.expect(pm.response.json().error).to.be.an('array');\r",
							"    pm.expect(pm.response.json().error).to.include(\"As senhas não conferem.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenUser}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"confirmPassword\": \"1237@Test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/user/password/6798371fe270333a9a038f5a",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						"password",
						"6798371fe270333a9a038f5a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Não editar password, password já utilizado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status validation\", function(){\r",
							"     pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificar mensagem de sucesso\", function(){\r",
							"    pm.expect(pm.response.json().msg).to.be.eql(\"Essa senha já foi utilizada anteriormente. Por favor, escolha uma nova senha.\")\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenUser}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"confirmPassword\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/user/password/6798371fe270333a9a038f5a",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						"password",
						"6798371fe270333a9a038f5a"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "tq13token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzQ4ZjZiMTQyNzgxZWMwY2U0NWY1ZTgiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCQ1WHVqUDYvOVkvREJncFdERGQ0SEMubUl1YkliVFFGLkNtYm9Gd29lU3E2UC53OWkuaGwxNiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoicXVpbnRhLWZlaXJhLCAyOC8xMS8yMDI0LCAyMDowMzoxMyBCUlQiLCJyZWdpc3RyYXRpb25OdW1iZXIiOiIwMSIsImNvbXBhbnlJZCI6IlFhLkNvZGVycyIsIl9pZCI6IjY3NDhmNmIxNDI3ODFlYzBjZTQ1ZjVlOSJ9XSwiX192IjowLCJpYXQiOjE3MzgwMjgzMjUsImV4cCI6MTczODExNDcyNX0.BLNGNXCY3RNvsfztfHamCGeSt_o8cqVctLR_Gpuu4Ec",
			"type": "default"
		},
		{
			"key": "tq13token_usuario",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2Nzk4MzcxZmUyNzAzMzNhOWEwMzhmNWEiLCJmdWxsTmFtZSI6IlJvZHJpZ28gQ2FicmFsIiwibWFpbCI6InJvZHJpZ29AdGVzdC5jb20uYnIiLCJwYXNzd29yZCI6IiQyYiQxMCQwY3FYVzUvdzYueEkwOE1iZTQuNXguY2Y0Njc3UEdTeGdrSFViRjNpb0Z6cGM2Qk1UdC9DLiIsImFjY2Vzc1Byb2ZpbGUiOiJBRE1JTiIsImNwZiI6IjMzMzA0NzIzMzQ0Iiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjY3NDhmNmIxNDI3ODFlYzBjZTQ1ZjVlOCIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2VndW5kYS1mZWlyYSwgMjcvMDEvMjAyNSwgMjI6NDc6MTAgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtNCIsIl9pZCI6IjY3OTgzNzFmZTI3MDMzM2E5YTAzOGY1YiJ9XSwiX192IjowLCJpYXQiOjE3MzgxMDQ1NjIsImV4cCI6MTczODE5MDk2Mn0.BaowDyhE8-lqecp1SbMZ7-reSaDV-ekDh0Mqe0ZWgvQ",
			"type": "default"
		}
	]
}
